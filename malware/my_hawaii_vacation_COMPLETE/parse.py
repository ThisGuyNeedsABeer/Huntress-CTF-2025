import re
import argparse
import sys

def parse_lua_file(input_file_path, output_file_path):
    """
    Parses a Lua file, finds all calls matching the pattern
    __D("...", __K), and writes them to a new file,
    wrapping each match in 'print((...))'.
    """
    
    # This regex looks for the literal string `__D("`
    # then non-greedily captures everything `.*?` until it finds
    # the literal string `", __K)`
    # The outer parentheses capture the entire match.
    pattern = re.compile(r'(__D\(".*?",\s*__K\))')
    
    try:
        with open(input_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Error: Input file not found at {input_file_path}", file=sys.stderr)
        return
    except Exception as e:
        print(f"Error reading file '{input_file_path}': {e}", file=sys.stderr)
        return

    matches = pattern.findall(content)

    if not matches:
        print(f"No matches found in {input_file_path}.")
        return

    try:
        with open(output_file_path, 'w', encoding='utf-8') as f:
            for match in matches:
                # Write the line in the format: print((__D("...", __K)))
                f.write(f"print(({match}))\n")
        
        print(f"Successfully extracted {len(matches)} strings to {output_file_path}")

    except Exception as e:
        print(f"Error writing to output file '{output_file_path}': {e}", file=sys.stderr)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Parse a Lua file to find all __D("...", __K) strings.')
    parser.add_argument('input_file', 
                        help='The path to the input Lua file (e.g., "1.lua" or "1-new.lua")')
    parser.add_argument('-o', '--output', default='strings_to_decode.lua',
                        help='The name of the output file (default: strings_to_decode.lua)')
    
    args = parser.parse_args()
    
    parse_lua_file(args.input_file, args.output)