from capstone import Cs, CS_ARCH_X86, CS_MODE_64

# The bytearray provided by the user
bytearray_data = bytearray(b'U\x89\xe5\x81\xec\x80\x00\x00\x00h\x93\xd8\x84\x84h\x90\xc3\xc6\x97h\xc3\x90\x93\x92h\x90\xc4\xc3\xc7h\x9c\x93\x9c\x93h\xc0\x9c\xc6\xc6h\x97\xc6\x9c\x93h\x94\xc7\x9d\xc1h\xde\xc1\x96\x91h\xc3\xc9\xc4\xc2\xb9\n\x00\x00\x00\x89\xe7\x817\xa5\xa5\xa5\xa5\x83\xc7\x04Iu\xf4\xc6D$&\x00\xc6\x85\x7f\xff\xff\xff\x00\x89\xe6\x8d}\x80\xb9&\x00\x00\x00\x8a\x06\x88\x07FGIu\xf7\xc6\x07\x00\x8d<$\xb9@\x00\x00\x00\xb0\x01\x88\x07GIu\xfa\xc9\xc3')

# Initialize disassembler
md = Cs(CS_ARCH_X86, CS_MODE_64)

# Disassemble the bytearray
instructions = list(md.disasm(bytearray_data, 0x1000))  # Use 0x1000 as the starting address for disassembly

# Collecting the disassembled instructions
disassembled_code = [(instr.address, instr.mnemonic, instr.op_str) for instr in instructions]

# Print the first 20 instructions
for addr, mnemonic, op_str in disassembled_code[:20]:
    print(f"0x{addr:x}:\t{mnemonic}\t{op_str}")
